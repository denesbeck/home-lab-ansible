---
- name: Setup daily photo backup with rotation
  hosts: all
  become: yes

  vars:
    backup_source: /mnt/photos
    backup_destination: /mnt/backups
    backup_script_path: /usr/local/bin/backup-photos.sh
    backup_user: "{{ ansible_user }}"
    backup_group: "{{ ansible_user }}"

  tasks:
    - name: Ensure backup destination directory exists
      file:
        path: "{{ backup_destination }}"
        state: directory
        owner: "{{ backup_user }}"
        group: "{{ backup_group }}"
        mode: "0755"

    - name: Create backup script
      copy:
        dest: "{{ backup_script_path }}"
        mode: "0755"
        owner: root
        group: root
        content: |
          #!/bin/bash

          # Photo backup script with rotation
          # Backs up {{ backup_source }} to {{ backup_destination }}/photos_<timestamp>
          # Keeps only the last 3 backups

          set -euo pipefail

          SOURCE="{{ backup_source }}"
          BACKUP_BASE="{{ backup_destination }}"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKUP_DIR="${BACKUP_BASE}/photos_${TIMESTAMP}"
          LOG_FILE="/var/log/backup-photos.log"

          # Function to log messages
          log_message() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
          }

          # Check if source directory exists
          if [[ ! -d "$SOURCE" ]]; then
              log_message "ERROR: Source directory $SOURCE does not exist"
              exit 1
          fi

          # Check if backup base directory exists
          if [[ ! -d "$BACKUP_BASE" ]]; then
              log_message "ERROR: Backup base directory $BACKUP_BASE does not exist"
              exit 1
          fi

          log_message "Starting backup of $SOURCE to $BACKUP_DIR"

          # Create backup directory
          mkdir -p "$BACKUP_DIR"

          # Make sure that the backup directory is owned by the ansible_user
          chown {{ ansible_user }}:{{ ansible_user }} $BACKUP_DIR

          # Perform backup using rsync
          if rsync -aAXHvS "$SOURCE/" "$BACKUP_DIR/"; then
              log_message "Backup completed successfully to $BACKUP_DIR"
          else
              log_message "ERROR: Backup failed"
              # Clean up failed backup directory
              rm -rf "$BACKUP_DIR"
              exit 1
          fi

          # Rotation: Keep only the last 3 backups
          log_message "Starting backup rotation (keeping last 3 backups)"

          # Find all photo backup directories and sort by modification time (newest first)
          # Then skip the first 3 (keep them) and delete the rest
          find "$BACKUP_BASE" -maxdepth 1 -type d -name "photos_*" | \
              sort -nr | \
              tail -n +4 | \
              while IFS= read -r old_backup; do
                  if [[ -n "$old_backup" && "$old_backup" != "$BACKUP_BASE" ]]; then
                      log_message "Removing old backup: $old_backup"
                      rm -rf "$old_backup"
                  fi
              done

          log_message "Backup rotation completed"

          # Show current backups
          log_message "Current backups:"
          find "$BACKUP_BASE" -maxdepth 1 -type d -name "photos_*" -printf '%TY-%Tm-%Td %TH:%TM:%TS %p\n' | sort -r | tee -a "$LOG_FILE"

          log_message "Backup process finished successfully"

    - name: Create log file with proper permissions
      file:
        path: /var/log/backup-photos.log
        state: touch
        owner: "root"
        group: "root"
        mode: "0644"

    - name: Setup daily backup cronjob at 1 AM
      cron:
        name: "Daily photo backup"
        minute: "0"
        hour: "1"
        job: "{{ backup_script_path }} >> /var/log/backup-photos.log 2>&1"
        state: present

    - name: Verify backup script is executable
      file:
        path: "{{ backup_script_path }}"
        mode: "0755"
        state: file

    - name: Display backup configuration
      debug:
        msg:
          - "Backup script created at: {{ backup_script_path }}"
          - "Source directory: {{ backup_source }}"
          - "Backup destination: {{ backup_destination }}"
          - "Cronjob scheduled: Daily at 1:00 AM"
          - "Log file: /var/log/backup-photos.log"
          - "Backup retention: Last 3 backups"
